import GoogleProvider from "next-auth/providers/google";
import FacebookProvider from "next-auth/providers/Facebook";
import CredentialsProvider from 'next-auth/providers/credentials';
// import connectMongo from '../../../database/conn'
// import Users from '../../../model/Schema'
// import { compare } from 'bcryptjs';

export const options = ({
    page: {
        signIn: "/login",
    },
    providers: [
        FacebookProvider({
              clientId: process.env.FACEBOOK_CLIENT_ID,
              clientSecret: process.env.FACEBOOK_CLIENT_SECRET,
            }),
        GoogleProvider({
            clientId: process.env.GOOGLE_CLIENT_ID,
            clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        }),
        CredentialsProvider({
            name: "Credentials",
            credentials: {
                email: {
                    label: "Email:",
                    type: "text",
                    placeholder: "your-cool-email"
                },
                password: {
                    label: "Password:",
                    type: "password",
                    placeholder: "your-awesome-password"
                }
            },
            async authorize(credentials) {
                // This is where you need to retrieve user data 
                // to verify with credentials
                // Docs: https://next-auth.js.org/configuration/providers/credentials
                const user = { id: "42", email: "aaa@aaa.com", password: "123456", role: "admin" }

                if (credentials?.email === user.email && credentials?.password === user.password) {
                    return user
                } else {
                    throw new Error("Username or Password doesn't match");
                }
            }
        })
    ],
    secret: "8e1718109df6d2ac63cddde63a8f8070",
    callbacks: {
        // Ref: https://authjs.dev/guides/basics/role-based-access-control#persisting-the-role
        async jwt({ token, user }) {
            if (user) token.role = user.role
            return token;
        },
        // If you want to use the role in client components
        async session({ session, token }) {
            if (session?.user) session.user.role = token.role
            return session;
        },
    }
});